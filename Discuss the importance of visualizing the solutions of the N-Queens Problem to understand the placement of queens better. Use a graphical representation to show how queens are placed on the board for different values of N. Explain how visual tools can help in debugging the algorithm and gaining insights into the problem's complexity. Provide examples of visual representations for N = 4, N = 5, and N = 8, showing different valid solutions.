def print_board(board):
    """Prints the chessboard."""
    N = len(board)
    for row in board:
        print(" ".join("Q" if x else "." for x in row))
    print("\n")

def is_safe(board, row, col):
    """Checks if a queen can be placed at board[row][col]."""
    N = len(board)

    # Check this column on upper side
    for i in range(row):
        if board[i][col] == 1:
            return False

    # Check upper diagonal on left side
    for i, j in zip(range(row, -1, -1), range(col, -1, -1)):
        if j < 0: break
        if board[i][j] == 1:
            return False

    # Check upper diagonal on right side
    for i, j in zip(range(row, -1, -1), range(col, N)):
        if j >= N: break
        if board[i][j] == 1:
            return False

    return True

def solve_n_queens_util(board, row):
    """Utilizes backtracking to find all solutions."""
    N = len(board)
    if row >= N:
        print_board(board)
        return

    for col in range(N):
        if is_safe(board, row, col):
            board[row][col] = 1  # Place queen
            solve_n_queens_util(board, row + 1)  # Recur to place next queen
            board[row][col] = 0  # Backtrack

def solve_n_queens(N):
    """Solves the N-Queens problem and prints all solutions."""
    board = [[0 for _ in range(N)] for _ in range(N)]
    solve_n_queens_util(board, 0)

# Test for N = 4, N = 5, and N = 8
print("Solutions for N = 4:")
solve_n_queens(4)

print("Solutions for N = 5:")
solve_n_queens(5)

print("Solutions for N = 8:")
solve_n_queens(8)
