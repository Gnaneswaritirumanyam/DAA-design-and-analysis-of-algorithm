import heapq
def dijkstra(n, edges, source, target)
    adj_list = [[] for _ in range(n)]
    for u, v, w in edges:
        adj_list[u].append((v, w))
        adj_list[v].append((u, w)) 
    distances = [float('inf')] * n
    distances[source] = 0
    priority_queue = [(0, source)]
    while priority_queue:
        current_distance, u = heapq.heappop(priority_queue)
        if u == target:
            return current_distance
        if current_distance > distances[u]:
            continue
        for v, weight in adj_list[u]:
            distance = current_distance + weight
            if distance < distances[v]:
                distances[v] = distance
                heapq.heappush(priority_queue, (distance, v))
    return -1

# Example usage
n = 6
edges = [
    (0, 1, 7), (0, 2, 9), (0, 5, 14),
    (1, 2, 10), (1, 3, 15),
    (2, 3, 11), (2, 5, 2),
    (3, 4, 6), (4, 5, 9)
]
source = 0
target = 4

print(dijkstra(n, edges, source, target))  # Output: 20
