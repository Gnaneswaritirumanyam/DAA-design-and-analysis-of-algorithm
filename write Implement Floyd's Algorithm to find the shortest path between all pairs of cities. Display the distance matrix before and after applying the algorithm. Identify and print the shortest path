import numpy as np
def floyd_warshall(n, edges):
    dist = np.full((n, n), float('inf'))
    np.fill_diagonal(dist, 0)
    for u, v, w in edges:
        dist[u][v] = w
        dist[v][u] = w 
    for k in range(n):
        for i in range(n):
            for j in range(n):
                if dist[i][j] > dist[i][k] + dist[k][j]:
                    dist[i][j] = dist[i][k] + dist[k][j]
    return dist
def count_paths_within_threshold(dist, threshold):
    count = 0
    n = len(dist)
    for i in range(n):
        for j in range(n):
            if i != j and dist[i][j] <= threshold:
                count += 1
    return count
def print_matrix(matrix):
    for row in matrix:
        print(" ".join(f"{elem:7}" if elem != float('inf') else "INF" for elem in row))
def main():
    n = 5
    edges = [
        [0, 1, 2],
        [0, 4, 8],
        [1, 2, 3],
        [1, 4, 2],
        [2, 3, 1],
        [3, 4, 1]
    ]
    distance_threshold = 2
    print("Initial Distance Matrix:")
    dist = np.full((n, n), float('inf'))
    np.fill_diagonal(dist, 0)
    for u, v, w in edges:
        dist[u][v] = w
        dist[v][u] = w
    print_matrix(dist)
    dist = floyd_warshall(n, edges)
    print("\nDistance Matrix after Floyd-Warshall Algorithm:")
    print_matrix(dist)
    count = count_paths_within_threshold(dist, distance_threshold)
    print(f"\nNumber of pairs within distance threshold {distance_threshold}: {count}")
if __name__ == "__main__":
    main()
