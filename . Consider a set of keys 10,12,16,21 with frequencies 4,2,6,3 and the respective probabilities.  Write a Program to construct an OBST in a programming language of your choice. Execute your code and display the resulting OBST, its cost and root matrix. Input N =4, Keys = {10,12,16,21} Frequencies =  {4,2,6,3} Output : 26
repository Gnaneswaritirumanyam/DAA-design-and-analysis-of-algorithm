def optimal_bst(keys, freq):
    n = len(keys)
    cost = [[0] * n for _ in range(n)]
    root = [[0] * n for _ in range(n)]
    for i in range(n):
        cost[i][i] = freq[i]
        root[i][i] = i
    for length in range(2, n + 1):
        for i in range(n - length + 1):
            j = i + length - 1
            cost[i][j] = float('inf')  
            for r in range(i, j + 1):
                # Calculate cost if r is the root
                c = cost[i][r - 1] + cost[r + 1][j] + sum(freq[i:j + 1])
                if c < cost[i][j]:
                    cost[i][j] = c
                    root[i][j] = r

    return cost[0][n - 1], root
def print_optimal_bst(root, keys, i, j):
    if i > j:
        return
    r = root[i][j]
    print(f"Root: {keys[r]}")
    print_optimal_bst(root, keys, i, r - 1)
    print_optimal_bst(root, keys, r + 1, j)
N = 4
keys = [10, 12, 16, 21]
freq = [4, 2, 6, 3]
cost, root = optimal_bst(keys, freq)
print(f"Optimal Cost: {cost}")
print("Root Matrix:")
for row in root:
    print(row)

print("\nOptimal BST structure:")
print_optimal_bst(root, keys, 0, N - 1)
