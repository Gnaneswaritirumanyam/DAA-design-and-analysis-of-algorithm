import heapq

def networkDelayTime(times, n, k):
    # Create an adjacency list
    graph = {i: [] for i in range(1, n + 1)}
    for u, v, w in times:
        graph[u].append((v, w))
    distance = {i: float('inf') for i in range(1, n + 1)}
    distance[k] = 0
    min_heap = [(0, k)]  # (distance, node)
    while min_heap:
        curr_dist, node = heapq.heappop(min_heap)
        if curr_dist > distance[node]:
            continue
        for neighbor, weight in graph[node]:
            new_dist = curr_dist + weight
            if new_dist < distance[neighbor]:
                distance[neighbor] = new_dist
                heapq.heappush(min_heap, (new_dist, neighbor))
    max_time = max(distance.values())
    if max_time == float('inf'):
        return -1
    return max_time
