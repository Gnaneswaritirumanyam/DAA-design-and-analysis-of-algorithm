def is_valid_vertex(v, graph, path, pos):
    if graph[path[pos-1]][v] == 0:
        return False
    if v in path:
        return False
    return True
def hamiltonian_cycle_util(graph, path, pos):
    n = len(graph)
    if pos == n:
        return graph[path[pos-1]][path[0]] == 1
    for v in range(1, n):
        if is_valid_vertex(v, graph, path, pos):
            path[pos] = v
            if hamiltonian_cycle_util(graph, path, pos + 1):
                return True
            path[pos] = -1
    return False
def has_hamiltonian_cycle(edges, n):
    graph = [[0] * n for _ in range(n)]
    for u, v in edges:
        graph[u][v] = 1
        graph[v][u] = 1
    path = [-1] * n
    path[0] = 0
    if hamiltonian_cycle_util(graph, path, 1):
        return True
    return False
def main():
    edges = [(0, 1), (1, 2), (2, 3), (3, 0), (0, 2), (2, 4), (4, 0)]
    n = 5
    if has_hamiltonian_cycle(edges, n):
        print("Hamiltonian cycle exists")
    else:
        print("Hamiltonian cycle does not exist")
if __name__ == "__main__":
    main()
