def median_of_medians(arr, k):
    def partition(arr, low, high, pivot_index):
        pivot_value = arr[pivot_index]
        arr[pivot_index], arr[high] = arr[high], arr[pivot_index]
        store_index = low
        for i in range(low, high):
            if arr[i] < pivot_value:
                arr[store_index], arr[i] = arr[i], arr[store_index]
                store_index += 1
        arr[store_index], arr[high] = arr[high], arr[store_index]
        return store_index
    def select(arr, low, high, k):
        if low == high:
            return arr[low]
        def median_of_groups(arr, low, high):
            medians = []
            for i in range(low, high + 1, 5):
                sublist = arr[i:i + 5]
                sublist.sort()
                medians.append(sublist[len(sublist) // 2])
            if len(medians) <= 5:
                medians.sort()
                return medians[len(medians) // 2]
            else:
                return select(medians, 0, len(medians) - 1, len(medians) // 2)       
        median = median_of_groups(arr, low, high)
        pivot_index = arr.index(median)
        pivot_index = partition(arr, low, high, pivot_index)
        if k == pivot_index:
            return arr[k]
        elif k < pivot_index:
            return select(arr, low, pivot_index - 1, k)
        else:
            return select(arr, pivot_index + 1, high, k)
    return select(arr, 0, len(arr) - 1, k)
arr = [3, 6, 8, 10, 1, 2, 1]
k = 4  # Find the 4th smallest element
print(f"{k}-th smallest element is {median_of_medians(arr, k - 1)}")
