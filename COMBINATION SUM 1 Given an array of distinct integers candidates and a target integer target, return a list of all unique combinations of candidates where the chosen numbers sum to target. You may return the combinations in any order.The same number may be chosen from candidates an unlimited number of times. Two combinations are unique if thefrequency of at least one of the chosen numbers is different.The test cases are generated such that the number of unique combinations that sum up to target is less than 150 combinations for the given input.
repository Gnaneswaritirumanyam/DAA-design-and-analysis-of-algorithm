def combinationSum(candidates, target):
    def backtrack(start, path, remaining):
        # If remaining sum is 0, we found a valid combination
        if remaining == 0:
            result.append(path[:])
            return
        # If remaining sum becomes negative, no need to continue
        if remaining < 0:
            return
        
        for i in range(start, len(candidates)):
            # Include the current number and continue searching
            path.append(candidates[i])
            # We can reuse the same number, so we pass 'i' instead of 'i + 1'
            backtrack(i, path, remaining - candidates[i])
            # Backtrack by removing the last number added
            path.pop()

    result = []
    candidates.sort()  # Optional: sort to help with ordered results
    backtrack(0, [], target)
    return result

# Example usage
candidates = [2, 3, 6, 7]
target = 7
print(combinationSum(candidates, target))
