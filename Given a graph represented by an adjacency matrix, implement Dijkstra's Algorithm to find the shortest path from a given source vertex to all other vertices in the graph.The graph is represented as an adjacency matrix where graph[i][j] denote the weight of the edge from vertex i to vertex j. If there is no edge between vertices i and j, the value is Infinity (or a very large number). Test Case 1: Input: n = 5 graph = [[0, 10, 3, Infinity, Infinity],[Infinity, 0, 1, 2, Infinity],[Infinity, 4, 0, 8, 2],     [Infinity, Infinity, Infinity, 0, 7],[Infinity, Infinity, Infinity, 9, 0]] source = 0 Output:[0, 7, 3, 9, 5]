import heapq
def dijkstra(n, graph, source):
    distances = [float('inf')] * n
    distances[source] = 0
    priority_queue = [(0, source)]
    while priority_queue:
        current_distance, u = heapq.heappop(priority_queue)
        if current_distance > distances[u]:
            continue
        for v in range(n):
            weight = graph[u][v]
            if weight != float('inf'):  # If there's an edge
                distance = current_distance + weight
                if distance < distances[v]:
                    distances[v] = distance
                    heapq.heappush(priority_queue, (distance, v))
    return distances

# Example usage
n = 5
graph = [
    [0, 10, 3, float('inf'), float('inf')],
    [float('inf'), 0, 1, 2, float('inf')],
    [float('inf'), 4, 0, 8, 2],
    [float('inf'), float('inf'), float('inf'), 0, 7],
    [float('inf'), float('inf'), float('inf'), 9, 0]
]
source = 0

print(dijkstra(n, graph, source))  # Output: [0, 7, 3, 9, 5]
