import math
def closest_pair(points):
    def distance(p1, p2):
        return math.sqrt((p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2)
    def merge_and_find(strip, d):
        min_dist = d
        strip.sort(key=lambda point: point[1])  # Sort by y-coordinate
        for i in range(len(strip)):
            for j in range(i + 1, len(strip)):
                if (strip[j][1] - strip[i][1]) >= min_dist:
                    break
                min_dist = min(min_dist, distance(strip[i], strip[j]))
        return min_dist
    def closest_pair_rec(points_sorted_x, points_sorted_y):
        n = len(points_sorted_x)
        if n <= 3:
            # Base case: Use brute force for small number of points
            min_dist = float('inf')
            for i in range(n):
                for j in range(i + 1, n):
                    min_dist = min(min_dist, distance(points_sorted_x[i], points_sorted_x[j]))
            return min_dist
        mid = n // 2
        mid_point = points_sorted_x[mid]
        left_y = [point for point in points_sorted_y if point[0] <= mid_point[0]]
        right_y = [point for point in points_sorted_y if point[0] > mid_point[0]]
        d_left = closest_pair_rec(points_sorted_x[:mid], left_y)
        d_right = closest_pair_rec(points_sorted_x[mid:], right_y)
        d = min(d_left, d_right)
        strip = [point for point in points_sorted_y if abs(point[0] - mid_point[0]) < d]
        return min(d, merge_and_find(strip, d))
    points_sorted_x = sorted(points, key=lambda point: point[0])
    points_sorted_y = sorted(points, key=lambda point: point[1])
    return closest_pair_rec(points_sorted_x, points_sorted_y)
points = [(2, 3), (12, 30), (40, 50), (5, 1), (12, 10), (3, 4)]
result = closest_pair(points)
print(f"Closest pair distance: {result}")
